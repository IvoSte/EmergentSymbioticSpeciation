MODEL = "function_optimization"

# Runner
N_RUNS = 1
N_GENERATIONS = 250
N_COMPOSITIONS = 50    # Also the number of compositions
RUNS_PER_SET = 1
RUN_BENCHMARK = false
BENCHMARK_INTERVAL = 0

# Model
FUNCTION_NAME = "StronglyPartiallySeparable" # possible values: "Sum", "SumOffset", "FullySeparable", "PartiallySeparable", "FullyNonSeparable" "Sphere", "Rastrigin", "Ackley", "Schwefel", "Griewangk"
MAX_STEPS = 1
N_AGENTS = 10
AGENT_MODE = "full size"                     # possible values: "partial size" (an agent is a subset of the full solution), "full size" (an agent is the full solution size, and multiple agents are combined to form a solution)

# Agent
N_GENES = 10               # Match with CHROMOSOME_LENGTH
GENE_COST = 10.0
GENE_COST_MULTIPLIER = 1.0

# Chromosome
N_SUBPOPULATIONS = 1
SUBPOPULATION_SIZE = 250             # Population size = N_SUBPOPULATIONS * SUBPOPULATION_SIZE. It is limited by the parameter set size.
CHROMOSOME_LENGTH = 10               # Number of genes per agent, needs to be equal to N_GENES
CHROMOSOME_SAMPLING = "evolutionary" # Possible values: "uniform", "deterministic", "simple_random", "evolutionary". Determines how chromosomes are sampled for new parameter sets. Deterministic should be used if there are fixed number of species and their sizes remain the same.
SAVE_CHROMOSOMES = false

# Model Dev
RUN_WITH_VIEWER = false # Toxin model doesn't have a viewer
MULTITHREADING = false

# Evolution
COLLECTIVE_FITNESS_WEIGHT = 0.0
COLLECTIVE_FITNESS_TYPE = "objective value" # "objective value", "average". Average will include penalties.
INDIVIDUAL_FITNESS_TYPE = "default"         # Not implemented, always uses "default": -objective value + -penalty cost
SCALE_FITNESS_WITH_REPRESENTATION = true
ALIGN_COMPOSITIONS_WITH_POPULATION = true

EVOLUTION_TYPE = "emergent_subpopulations" #Possible values: "forced_subpopulations", "emergent_subpopulations"

DETECT_SPECIES_METHOD = "binary_knockout"       #Possible values: "dbscan", "kmeans", "optics", "binary", "binary_knockout"
DETECT_SPECIES_WITH_PREVIOUS_GENERATION = false # Use the previous generation to determine species. This is useful if you want to keep the same species between generations.
DETECT_SPECIES_INTERVAL = 5                     # KMeans requires a value for K. We can determine this value by calculating the best fit for K. We don't want to do this each generation.
DETECT_SPECIES_DELTA_RANGE = 1                  # Detecting the value for K needs a range. This is how many we detect around the previously used K.
DETECT_SPECIES_EPS = 0.25                       # DBSCAN and OPTICS require a value for epsilon. 
DETECT_SPECIES_MIN_SAMPLES = 1                  # DBSCAN and OPTICS require a value for min_samples.

SPECIES_TRACKING = false
SPECIES_TRACKING_SEARCH_DEPTH = 1
SPECIES_TRACKING_DISTANCE_THRESHOLD = 0.5
SPECIES_TRACKING_PROTOTYPE_METHOD = "centroid" # Possible values: "centroid", unimplemented: "mediod", "density_peak"

#Boundary conditions
[Sum]
GENE_VALUE_BOUNDARIES = [-100, 100]

[SumOffset]
GENE_VALUE_BOUNDARIES = [-100, 100]

[FullySeparable]
GENE_VALUE_BOUNDARIES = [-10, 10]

[PartiallySeparable]
GENE_VALUE_BOUNDARIES = [-10, 10]

[FullyNonSeparable]
GENE_VALUE_BOUNDARIES = [-10, 10]

[StronglyPartiallySeparable]
GENE_VALUE_BOUNDARIES = [-10, 10]

[Rastrigin]
GENE_VALUE_BOUNDARIES = [-5.12, 5.12]

[Ackley]
GENE_VALUE_BOUNDARIES = [-32.768, 32.768]

[Schwefel]
GENE_VALUE_BOUNDARIES = [-500, 500]

[Griewangk]
GENE_VALUE_BOUNDARIES = [-600, 600]

[Sphere]
GENE_VALUE_BOUNDARIES = [-100, 100]

[AGENT]
REPRODUCE_FRACTION = 0.5
CULL_FRACTION = 0.5
MUTATION_PROBABILITY = 0.1
MUTATION_RANGE = 0.1
SELECTION_TYPE = "fitness_proportional" #Possible values: "random", "fitness_proportional", "tournament", "rank"


MATE_SELECTION_TYPE = "nearest_neighbour" #Possible values: "random", "fitness_proportional", "nearest_neighbour", "approx_nearest_neighbour"
MATE_SELECTION_SAMPLE_SIZE = 10           # Number of individuals to sample from when selecting a mate. Useful if MATE_SELECTION_TYPE is "nearest_neighbour_from_sample", to limit approx nearest neighbour search time.
ALLOW_SELF_MATING = true                  # Allow an individual to mate with itself. This is useful if you want to allow for mutation only.

GENE_DATA_TYPE = "continuous" # possible values: "binary", "nominal", "continuous"

KNOCKOUT_MUTATION = true
KNOCKOUT_MUTATION_PROBABILITY = 0.1
INITIAL_GENE_KNOCKOUT = -1          # Number of genes to knock out initially. For a random number per chromosome set to -1. Only used if KNOCKOUT_MUTATION is true.


[COMPOSITION]
REPRODUCE_FRACTION = 0.5
CULL_FRACTION = 1.0                     # Needs to be 1.0, as the set of allowed genes changes each generation. (different species)
MUTATION_PROBABILITY = 0.1
MUTATION_RANGE = 0.1
SELECTION_TYPE = "fitness_proportional" #Possible values: "random", "fitness_proportional", "tournament", "rank"

CHROMOSOME_RESIZING = false           # Allow the number of chromosomes in the composition to change. Can only be applied for composition if there are variable number of slots.
CHROMOSOME_RESIZING_PROBABILITY = 0.1 # Probability of resizing a chromosome. Only applied if CHROMOSOME_RESIZING is true.

MATE_SELECTION_TYPE = "fitness_proportional" #Possible values: "random", "nearest_neighbour", "approx_nearest_neighbour"
MATE_SELECTION_SAMPLE_SIZE = 0               # Number of individuals to sample from when selecting a mate. Usefull if MATE_SELECTION_TYPE is "nearest_neighbour_from_sample", to limit approx nearest neighbour search time.
ALLOW_SELF_MATING = true                     # Allow an individual to mate with itself. This is useful if you want to allow for mutation only.
